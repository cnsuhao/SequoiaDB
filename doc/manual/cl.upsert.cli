.TH COMMAND * 2014-04-08 "SequoiaDB" "Sequoiadb Method's Manual"
.ad l.ll 72.ce 1000
\fBdb.collectionspace.collection.upsert()\fR
.ce 0
.sp 2

.SH "NAME"

.sp 2
upsert - Update collection records.
.SH "SYNOPSIS"

.sp 2

.sp 2

.sp 2
db.collectionspace.collection.upsert(\fB<rule>\fR,\fB[cond]\fR,\fB[hint]\fR)
.SH "CATEGORY"

.sp 2

.sp 2
Collection
.SH "DESCRIPTION"

.sp 2
Update collection records. The methods upsert() and update() are
both used to update records. But when no records is matched
according to the parameter "cond", "update" does nothing, but
"upset" will insert data once.
.sp 2
\fBrule (json object)\fR
.br
       Update rule. Records will be updated according to the
       value of "rule".
.sp 2
\fBcond (json object)\fR
.br
       Selecting contiditon. When it is null, update all the
       records. If it is not null, update records that match the
       condition in "cond".
.sp 2
\fBhint (json object)\fR
.br
       Specify access plan.
.sp 2
       \fBFormat\fR
.br
              The definition of upsert() must contain field
              "rule" which should be a json object. "cond" and
              "hint" are optional fields. "hint" is a json object
              that include one field, the field name will be
              ignored, and its value specifies the index name,
              when the value of the field is null, all the
              records in the collection will be accessed, its
              format is {"":null} or {"":"<indexname>"}.
.br
              {< {<{""update operator 1"":{field name
              1:"value"},"update operator 2":{"field name
              2":"value 2"},...}>,[{"field name 1":{"match
              operator 1":"value 1"},"field name 2":{"match
              operator 2":"value 2"},...}],[{"":"index
              name"|null}]}
.sp 2
\fBNote: \fR
.sp 2
   *  upsert() does not support the update of sharding key in
   this version, if there are update operations on sharding key,
   these operations will be automatically neglected and the
   update of other fields will still work without any problems.
.SH "Examples"

.sp 2
Supposing that there are 2 records in the collection "bar".
.sp 2
{
.br
    "_id": {
.br
      "$oid": "516a76a1c9565daf06030000"
.br
    },
.br
    "age": 10,
.br
    "name": "Tom"
.br
  }
.br
  {
.br
    "_id": {
.br
      "$oid": "516a76a1c9565daf06050000"
.br
    },
.br
    "a": 10,
.br
    "age": 21
.br
    }
.sp 2
Update all the records according to the update rule. That's to
say, we merely set the value of "rule", but not "cond" or "hint".
.sp 2
db.foo.bar.upsert({$inc:{age:1},$set:{name:"Mike"}})
.sp 2
This operation is equivalent to that of the method "update()". It
updates all the records in the collection "bar". It adds 1 to the
value of "age" and changes the value of "name" into "Mike". If a
record doesn't contain the field "name", "$set" will insert the
field of "name" and its value into the record and return with the
method "find".
.sp 2
 {
.br
    "_id": {
.br
      "$oid": "516a76a1c9565daf06030000"
.br
    },
.br
    "age": 11,
.br
    "name": "Mike"
.br
  }
.br
  {
.br
    "_id": {
.br
      "$oid": "516a76a1c9565daf06050000"
.br
    },
.br
    "a": 10,
.br
    "age": 22,
.br
    "name":"Mike"
.br
    }
.sp 2
Select records match the selecting condition, and update them
according to the update rule. That's to say, we set the value of
"rule" and "cond".
.sp 2
db.foo.bar.upsert({$inc:{age:3}},{type:{$exists:1}})
.sp 2
This operation will update records that contains the field "type"
in the collection "bar" and add 3 to the value of their "age"
field. The 2 records above don't contain the field "type", so it
will insert a new record. This new record contains only the field
"_id" and the field "age". The value of "_id" is automatically
generated by the system. The value of "age" is 3.
.sp 2
{
.br
    "_id": {
.br
      "$oid": "516a76a1c9565daf06030000"
.br
    },
.br
    "age": 11,
.br
    "name": "Mike"
.br
  }
.br
  {
.br
    "_id": {
.br
      "$oid": "516a76a1c9565daf06050000"
.br
    },
.br
    "a": 10,
.br
    "age": 22,
.br
    "name":"Mike"
.br
  } 
.br
{
.br
  "_id": {
.br
    "$oid": "516cfc334630a7f338c169b0"
.br
  },
.br
  "age": 3
.br
  }
.sp 2
Update records according to Access plan, supposing that the index
name "testIndex" exists in the collection.
.sp 2
db.foo.bar.upsert({$inc:{age:1}},{age:{$gt:20}},{"":"testIndex"})>
.sp 2
This operation is equivalent to update(), it accesses records
that contain a value which is no less than 20 in the field "age"
according to the index named "testIndex", and add 1 to the value
of the field "age". Then it returns:
.sp 2
 {
.br
    "_id": {
.br
      "$oid": "516a76a1c9565daf06050000"
.br
    },
.br
    "a": 10,
.br
    "age": 23,
.br
    "name":"Mike"
.br
  } 